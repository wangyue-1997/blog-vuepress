(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{391:function(s,t,a){"use strict";a.r(t);var n=a(3),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"浮点数的存储"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浮点数的存储"}},[s._v("#")]),s._v(" 浮点数的存储")]),s._v(" "),a("p",[s._v("首先要搞清楚 JavaScript 如何存储小数。和其它语言如 Java 和 Python 不同，JavaScript 中所有数字包括整数和小数都只有一种类型 — "),a("code",[s._v("Number")]),s._v("。它的实现遵循"),a("code",[s._v("IEEE 754")]),s._v("标准，使用 64 位固定长度来表示，也就是标准的 double 双精度浮点数（相关的还有float 32位单精度）。")]),s._v(" "),a("p",[s._v("这样的存储结构优点是可以归一化处理整数和小数，节省存储空间。")]),s._v(" "),a("p",[s._v("64位比特又可分为三个部分：")]),s._v(" "),a("ol",[a("li",[s._v("符号位S：第 1 位是正负数符号位（sign），0代表正数，1代表负数")]),s._v(" "),a("li",[s._v("指数位E：中间的 11 位存储指数（exponent），用来表示次方数")]),s._v(" "),a("li",[s._v("尾数位M：最后的 52 位是尾数（mantissa），超出的部分自动进一舍零")])]),s._v(" "),a("p",[a("img",{attrs:{src:"/blog-vuepress/2020/1028/393035612e706e67.png",alt:""}})]),s._v(" "),a("p",[s._v("实际数字就可以用以下公式来计算：")]),s._v(" "),a("p",[a("img",{attrs:{src:"/blog-vuepress/2020/1028/e7-9d46-bb48a470bedf.png",alt:""}})]),s._v(" "),a("p",[s._v("注意以上的公式遵循科学计数法的规范，在十进制是为0<M<10，到二进行就是0<M<2。也就是说整数部分只能是1，所以可以被舍去，只保留后面的小数部分。如 4.5 转换成二进制就是 100.1，科学计数法表示是 1.001*2^2，舍去1后 "),a("code",[s._v("M = 001")]),s._v("。E是一个无符号整数，因为长度是11位，取值范围是 0~2047。但是科学计数法中的指数是可以为负数的，所以再减去一个中间数 1023，[0,1022]表示为负，[1024,2047] 表示为正。如4.5 的指数"),a("code",[s._v("E = 1025")]),s._v("，尾数M为 001。")]),s._v(" "),a("p",[s._v("最终的公式变成：")]),s._v(" "),a("p",[a("img",{attrs:{src:"/blog-vuepress/2020/1028/31601584-f65ed43e-b21f-11e7-8755-c99b48e5134c.png",alt:""}})]),s._v(" "),a("p",[s._v("所以 "),a("code",[s._v("4.5")]),s._v(" 最终表示为（M=001、E=1025）：")]),s._v(" "),a("p",[a("img",{attrs:{src:"/blog-vuepress/2020/1028/436393664353731613862656232303633642e706e67.png",alt:""}})]),s._v(" "),a("p",[s._v("下面再以 "),a("code",[s._v("0.1")]),s._v(" 例解释浮点误差的原因， "),a("code",[s._v("0.1")]),s._v(" 转成二进制表示为 "),a("code",[s._v("0.0001100110011001100")]),s._v("(1100循环)，"),a("code",[s._v("1.100110011001100x2^-4")]),s._v("，所以 "),a("code",[s._v("E=-4+1023=1019")]),s._v("；M 舍去首位的1，得到 "),a("code",[s._v("100110011...")]),s._v("。最终就是：")]),s._v(" "),a("p",[a("img",{attrs:{src:"/blog-vuepress/2020/1028/3166316238393837316532656666383765662e706e67.png",alt:""}})]),s._v(" "),a("p",[s._v("转化成十进制后为 "),a("code",[s._v("0.100000000000000005551115123126")]),s._v("，因此就出现了浮点误差。")]),s._v(" "),a("h2",{attrs:{id:"为什么-0-1-0-2-0-3000000004？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么-0-1-0-2-0-3000000004？"}},[s._v("#")]),s._v(" 为什么 "),a("code",[s._v("0.1+0.2=0.3000000004")]),s._v("？")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 0.1 和 0.2 都转化成二进制后再进行运算")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00011001100110011001100110011001100110011001100110011010")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0011001100110011001100110011001100110011001100110011010")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0100110011001100110011001100110011001100110011001100111")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 转成十进制正好是 0.30000000000000004")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h2",{attrs:{id:"为什么-x-0-1-能得到-0-1？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么-x-0-1-能得到-0-1？"}},[s._v("#")]),s._v(" 为什么 "),a("code",[s._v("x=0.1")]),s._v(" 能得到 "),a("code",[s._v("0.1")]),s._v("？")]),s._v(" "),a("p",[s._v("因为 mantissa 固定长度是 52 位，再加上省略的一位，最多可以表示的数是 "),a("code",[s._v("2^53=9007199254740992")]),s._v("，对应科学计数尾数是 "),a("code",[s._v("9.007199254740992")]),s._v("，这也是 JS 最多能表示的精度。它的长度是 16，所以可以使用 "),a("code",[s._v("toPrecision(16)")]),s._v(" 来做精度运算，超过的精度会自动做凑整处理。于是就有：")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 返回 0.1000000000000000，去掉末尾的零后正好为 0.1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.10000000000000000555")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("toPrecision")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 但你看到的 `0.1` 实际上并不是 `0.1`。不信你可用更高的精度试试：")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("toPrecision")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.100000000000000005551")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h2",{attrs:{id:"大数危机"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#大数危机"}},[s._v("#")]),s._v(" 大数危机")]),s._v(" "),a("p",[s._v("可能你已经隐约感觉到了，如果整数大于 9007199254740992 会出现什么情况呢？\n由于 E 最大值是 1023，所以最大可以表示的整数是 "),a("code",[s._v("2^1024 - 1")]),s._v("，这就是能表示的最大整数。但你并不能这样计算这个数字，因为从 "),a("code",[s._v("2^1024")]),s._v(" 开始就变成了 "),a("code",[s._v("Infinity")])]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("pow")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1023")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8.98846567431158e+307")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("pow")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1024")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("Infinity")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("那么对于 "),a("code",[s._v("(2^53, 2^63)")]),s._v(" 之间的数会出现什么情况呢？")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("(2^53, 2^54)")]),s._v(" 之间的数会两个选一个，只能精确表示偶数")]),s._v(" "),a("li",[a("code",[s._v("(2^54, 2^55)")]),s._v(" 之间的数会四个选一个，只能精确表示4个倍数")]),s._v(" "),a("li",[s._v("... 依次跳过更多2的倍数")])]),s._v(" "),a("p",[s._v("下面这张图能很好的表示 JavaScript 中浮点数和实数（Real Number）之间的对应关系。我们常用的 "),a("code",[s._v("(-2^53, 2^53)")]),s._v(" 只是最中间非常小的一部分，越往两边越稀疏越不精确。")]),s._v(" "),a("p",[a("img",{attrs:{src:"/blog-vuepress/2020/1028/3661623433612e6a7067.jpg",alt:""}})]),s._v(" "),a("p",[s._v("在淘宝早期的订单系统中把订单号当作数字处理，后来随意订单号暴增，已经超过了\n"),a("code",[s._v("9007199254740992")]),s._v("，最终的解法是把订单号改成字符串处理。")]),s._v(" "),a("p",[s._v("要想解决大数的问题你可以引用第三方库 "),a("a",{attrs:{href:"https://github.com/MikeMcl/bignumber.js/",target:"_blank",rel:"noopener noreferrer"}},[s._v("bignumber.js"),a("OutboundLink")],1),s._v("，原理是把所有数字当作字符串，重新实现了计算逻辑，缺点是性能比原生的差很多。所以原生支持大数就很有必要了，现在 TC39 已经有一个 Stage 3 的提案 "),a("a",{attrs:{href:"https://github.com/tc39/proposal-bigint",target:"_blank",rel:"noopener noreferrer"}},[s._v("proposal bigint"),a("OutboundLink")],1),s._v("，大数问题有望彻底解决。在浏览器正式支持前，可以使用 Babel 7.0 来实现，它的内部是自动转换成 "),a("a",{attrs:{href:"https://github.com/peterolson/BigInteger.js",target:"_blank",rel:"noopener noreferrer"}},[s._v("big-integer"),a("OutboundLink")],1),s._v(" 来计算，要注意的是这样能保持精度但运算效率会降低。")]),s._v(" "),a("h2",{attrs:{id:"toprecision-vs-tofixed"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#toprecision-vs-tofixed"}},[s._v("#")]),s._v(" "),a("code",[s._v("toPrecision")]),s._v(" vs "),a("code",[s._v("toFixed")])]),s._v(" "),a("p",[s._v("数据处理时，这两个函数很容易混淆。它们的共同点是把数字转成字符串供展示使用。注意在计算的中间过程不要使用，只用于最终结果。")]),s._v(" "),a("p",[s._v("不同点就需要注意一下：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("toPrecision")]),s._v(" 是处理精度，精度是从左至右第一个不为0的数开始数起。")]),s._v(" "),a("li",[a("code",[s._v("toFixed")]),s._v(" 是小数点后指定位数取整，从小数点开始数起。")])]),s._v(" "),a("p",[s._v("两者都能对多余数字做凑整处理，也有些人用 "),a("code",[s._v("toFixed")]),s._v(" 来做四舍五入，但一定要知道它是有 Bug 的。")]),s._v(" "),a("p",[s._v("如："),a("code",[s._v("1.005.toFixed(2)")]),s._v(" 返回的是 "),a("code",[s._v("1.00")]),s._v(" 而不是 "),a("code",[s._v("1.01")]),s._v("。")]),s._v(" "),a("p",[s._v("原因： "),a("code",[s._v("1.005")]),s._v(" 实际对应的数字是 "),a("code",[s._v("1.00499999999999989")]),s._v("，在四舍五入时全部被舍去！")]),s._v(" "),a("p",[s._v("解法：使用专业的四舍五入函数 "),a("code",[s._v("Math.round()")]),s._v(" 来处理。但 "),a("code",[s._v("Math.round(1.005 * 100) / 100")]),s._v(" 还是不行，因为 "),a("code",[s._v("1.005 * 100 = 100.49999999999999")]),s._v("。还需要把乘法和除法精度误差都解决后再使用 "),a("code",[s._v("Math.round")]),s._v("。可以使用后面介绍的 "),a("code",[s._v("number-precision#round")]),s._v(" 方法来解决。")]),s._v(" "),a("h2",{attrs:{id:"数据展示类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据展示类"}},[s._v("#")]),s._v(" 数据展示类")]),s._v(" "),a("p",[s._v("当你拿到 "),a("code",[s._v("1.4000000000000001")]),s._v(" 这样的数据要展示时，建议使用 "),a("code",[s._v("toPrecision")]),s._v(" 凑整并 "),a("code",[s._v("parseFloat")]),s._v(" 转成数字后再显示，如下：")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("parseFloat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.4000000000000001")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("toPrecision")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.4")]),s._v("  \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("封装成方法就是：")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("strip")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" precision "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("parseFloat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("toPrecision")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("precision"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("为什么选择 "),a("code",[s._v("12")]),s._v(" 做为默认精度？这是一个经验的选择，一般选12就能解决掉大部分0001和0009问题，而且大部分情况下也够用了，如果你需要更精确可以调高。")]),s._v(" "),a("h2",{attrs:{id:"数据运算类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据运算类"}},[s._v("#")]),s._v(" 数据运算类")]),s._v(" "),a("p",[s._v("对于运算类操作，如 "),a("code",[s._v("+-*/")]),s._v("，就不能使用 "),a("code",[s._v("toPrecision")]),s._v(" 了。正确的做法是把小数转成整数后再运算。以加法为例：")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * 精确加法\n */")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("num1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" num2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" num1Digits "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("num1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("split")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'.'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" num2Digits "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("num2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("split")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'.'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" baseNum "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("pow")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("max")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("num1Digits"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" num2Digits"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("num1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" baseNum "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" num2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" baseNum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" baseNum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("以上方法能适用于大部分场景。遇到科学计数法如 "),a("code",[s._v("2.3e+1")]),s._v("（当数字精度大于21时，数字会强制转为科学计数法形式显示）时还需要特别处理一下。")])])}),[],!1,null,null,null);t.default=e.exports}}]);