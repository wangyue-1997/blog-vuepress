(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{375:function(t,s,a){"use strict";a.r(s);var n=a(3),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),a("p",[t._v("JavaScript 是一门 "),a("strong",[t._v("单线程")]),t._v(" 语言，即同一时间只能执行一个任务，即代码执行是同步并且阻塞的。")]),t._v(" "),a("blockquote",[a("p",[t._v("eg. 这就像只有一个窗口的银行，客户需要一个一个排队办理业务。")])]),t._v(" "),a("p",[t._v("只能同步执行肯定是有问题的，所以 JS 有了一个用来实现异步的函数："),a("code",[t._v("setTimeout")])]),t._v(" "),a("p",[t._v("下面要讲的 Event Loop 就是为了确保 异步代码 可以在 同步代码 执行后继续执行的。")]),t._v(" "),a("h2",{attrs:{id:"队列（queue）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#队列（queue）"}},[t._v("#")]),t._v(" 队列（Queue）")]),t._v(" "),a("p",[a("strong",[t._v("队列")]),t._v(" 是一种 FIFO(First In, First Out) 的数据结构，它的特点就是 "),a("strong",[t._v("先进先出")])]),t._v(" "),a("blockquote",[a("p",[t._v("eg. 生活中最常见的例子就是排队啦，排在队伍最前面的人最先被提供服务。")])]),t._v(" "),a("h2",{attrs:{id:"栈（stack）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#栈（stack）"}},[t._v("#")]),t._v(" 栈（Stack）")]),t._v(" "),a("p",[a("strong",[t._v("栈")]),t._v(" 是一种 LIFO（Last In, First Out）的数据结构，特点即 "),a("strong",[t._v("后进先出")]),t._v("。")]),t._v(" "),a("blockquote",[a("p",[t._v("eg. 大家都吃过桶装薯片吧~薯片在包装的时候只能从顶部放入，而吃的时候也只能从顶部拿出，这就叫后进先出哈")])]),t._v(" "),a("h2",{attrs:{id:"调用栈（call-stack）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#调用栈（call-stack）"}},[t._v("#")]),t._v(" 调用栈（Call Stack）")]),t._v(" "),a("p",[t._v("它本质上当然还是个栈啦 ，关键在于它里面装的东西，是一个个待执行的函数。")]),t._v(" "),a("blockquote",[a("p",[t._v("Event Loop 会一直检查 Call Stack 中是否有函数需要执行，如果有，就从栈顶依次执行。同时，如果执行的过程中发现其他函数，继续入栈然后执行。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/blog-vuepress/2020/0823/1017324427-5e00de6a37774_articlex.gif",alt:""}})]),t._v(" "),a("p",[a("em",[t._v("举个例子：")])]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("bar")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bar'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("baz")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'baz'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("foo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("baz")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("p",[t._v("这段代码执行如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/blog-vuepress/2020/0823/556178418-5cec9e197324f_articlex.png",alt:""}})]),t._v(" "),a("blockquote",[a("p",[t._v("这个调用栈其实大家经常会见到，就是在控制台报错的时候，错误信息显示的就是当前时刻调用栈的状态。")])]),t._v(" "),a("p",[a("strong",[t._v("But")]),t._v(", 上面我们讨论的其实都是同步代码，代码在运行的时候只用 调用栈 解释就可以了。")]),t._v(" "),a("p",[t._v("那么，假如我们发起了一个网络请求(request)，或者设置了一个定时器延时(setTimeout)，一段时间后的代码（回调函数）肯定不是直接被加到调用栈吧？")]),t._v(" "),a("p",[t._v("这时就要引出 "),a("strong",[t._v("事件表格（Event Table）")]),t._v(" 和 "),a("strong",[t._v("事件队列 (Event Queue)")]),t._v(" 了")]),t._v(" "),a("h2",{attrs:{id:"事件表格（event-table）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件表格（event-table）"}},[t._v("#")]),t._v(" 事件表格（Event Table）")]),t._v(" "),a("p",[t._v("Event Table 可以理解成一张 "),a("code",[t._v("事件->回调函数")]),t._v(" 对应表")]),t._v(" "),a("blockquote",[a("p",[t._v("它就是用来存储 JavaScript 中的异步事件 (request, setTimeout, IO等) 及其对应的回调函数的列表")])]),t._v(" "),a("h2",{attrs:{id:"事件队列（event-queue）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件队列（event-queue）"}},[t._v("#")]),t._v(" 事件队列（Event Queue）")]),t._v(" "),a("p",[t._v("Event Queue 简单理解就是 "),a("code",[t._v("回调函数 队列")]),t._v("，所以它也叫 Callback Queue")]),t._v(" "),a("blockquote",[a("p",[t._v("当 Event Table 中的事件被触发，事件对应的 "),a("strong",[t._v("回调函数")]),t._v(" 就会被 push 进这个 Event Queue，然后等待被执行")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/blog-vuepress/2020/0823/765249048-5e00e6ca486ac_articlex.gif",alt:""}})]),t._v(" "),a("h2",{attrs:{id:"事件循环（event-loop）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件循环（event-loop）"}},[t._v("#")]),t._v(" 事件循环（Event Loop）")]),t._v(" "),a("p",[t._v("Event Loop 的唯一任务就是 "),a("strong",[t._v("连接任务队列和调用栈")])]),t._v(" "),a("p",[t._v("让我们来先看一下流程图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/blog-vuepress/2020/0823/454794347-5cec9e1971f69_articlex.png",alt:""}})]),t._v(" "),a("ul",[a("li",[t._v("开始，任务先进入 Call Stack")]),t._v(" "),a("li",[t._v("同步任务直接在栈中等待被执行，异步任务从 Call Stack 移入到 Event Table 注册")]),t._v(" "),a("li",[t._v("当对应的事件触发（或延迟到指定时间），Event Table 会将事件回调函数移入 Event Queue 等待")]),t._v(" "),a("li",[t._v("当 Call Stack 中没有任务，就从 Event Queue 中拿出一个任务放入 Call Stack")])]),t._v(" "),a("blockquote",[a("p",[t._v("它不停检查 "),a("strong",[t._v("调用栈")]),t._v(" 中是否有任务需要执行，如果没有，就检查 "),a("strong",[t._v("任务队列")]),t._v("，从中弹出一个任务，放入调用栈中，如此往复循环。")])]),t._v(" "),a("h2",{attrs:{id:"宏队列和微队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#宏队列和微队列"}},[t._v("#")]),t._v(" 宏队列和微队列")]),t._v(" "),a("p",[a("code",[t._v("Event Queue")]),t._v("在 HTML 规范中被称为 "),a("code",[t._v("Task Queue")]),t._v("，但是为了区分，一般都叫作"),a("code",[t._v("Macrotask Queue,Job Queue")]),t._v(" 是在 ECMAScript 规范中谈及处理 Promise 回调时提到的，但是由于和 V8 中的实现比较相似，所以一般都称为 "),a("code",[t._v("Microtask Queue")])]),t._v(" "),a("h3",{attrs:{id:"宏队列（macrotask）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#宏队列（macrotask）"}},[t._v("#")]),t._v(" 宏队列（Macrotask）")]),t._v(" "),a("p",[t._v("Macrotasks 包含了解析 HTML、生成 DOM、执行主线程 JS 代码和其他事件如 页面加载、输入、网络事件、定时器事件等。从浏览器的角度，Macrotask 代表的是一些离散的独立的工作。")]),t._v(" "),a("p",[a("strong",[t._v("常见应用")])]),t._v(" "),a("blockquote",[a("p",[t._v("setTimeout, setInterval, setImmediate, requestAnimationFrame, I/O, UI rendering")])]),t._v(" "),a("h3",{attrs:{id:"微队列（microtask）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#微队列（microtask）"}},[t._v("#")]),t._v(" 微队列（Microtask）")]),t._v(" "),a("p",[t._v("Microtasks 则是为了完成一些更新应用程序状态的较小的任务，如处理 Promise 的回调和 DOM 的修改，以便让这些任务在浏览器重新渲染之前执行。Microtask 应该以异步的方式尽快执行，所以它们的开销比 Macrotask 要小，并且可以使我们在 UI 重新渲染之前执行，避免了不必要的 UI 渲染。")]),t._v(" "),a("p",[a("strong",[t._v("常见应用")])]),t._v(" "),a("blockquote",[a("p",[t._v("process.nextTick, Promises, Object.observe, MutationObserver")])]),t._v(" "),a("h3",{attrs:{id:"执行顺序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行顺序"}},[t._v("#")]),t._v(" 执行顺序")]),t._v(" "),a("p",[t._v("Event Loop 的实现需要至少一个 Macrotask Queue 和至少一个 Microtask Queue。为了便于理解，我们都简化成一个。\n简单来说，"),a("code",[t._v("Microtask Queue")]),t._v("具有"),a("strong",[t._v("更高的优先级")]),t._v("，即执行一个 Macrotask 任务后，就会清空整个 Microtask Queue，此时如果有新的 Microtask 加入也会被执行。")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resolve"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("reject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("res")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br")])]),a("p",[a("em",[t._v("步骤：")])]),t._v(" "),a("ol",[a("li",[t._v("开始执行，"),a("strong",[t._v("执行脚本作为一个任务进入 Macrotask Queue")]),t._v("，同时进入调用栈执行")]),t._v(" "),a("li",[t._v("Line 1, 输出 "),a("code",[t._v("1")])]),t._v(" "),a("li",[t._v("Line 3 的 setTimeout 回调进入 Macrotask Queue 等待")]),t._v(" "),a("li",[t._v("Line 7 的Promise  执行输出 "),a("code",[t._v("3")])]),t._v(" "),a("li",[t._v("Line 7 的回调进入 Microtask Queue 等待")]),t._v(" "),a("li",[t._v("Line 14 输出 "),a("code",[t._v("5")]),t._v("，此时脚本执行完成（即完成了一个 Macrotask）")]),t._v(" "),a("li",[t._v("开始执行 Microtask Queue，从中拿出一个放入调用栈执行")]),t._v(" "),a("li",[t._v("开始执行 Line 10 的回调，该回调输出 "),a("code",[t._v("4")])]),t._v(" "),a("li",[t._v("Microtask Queue 已清空（此时浏览器可以更新渲染UI），开始将 Macrotask Queue 中任务放入调用栈执行")]),t._v(" "),a("li",[t._v("执行 Line 3 的回调，输出 "),a("code",[t._v("setTimeout")]),t._v("中的"),a("code",[t._v("2")]),t._v("，Macrotask Queue 清空")]),t._v(" "),a("li",[t._v("程序执行完成")])]),t._v(" "),a("p",[t._v("所以打印顺序为：")]),t._v(" "),a("blockquote",[a("p",[t._v("1 > 3 > 5 > 4 > 2")])]),t._v(" "),a("h3",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[a("img",{attrs:{src:"/blog-vuepress/2020/0823/3184530558-5cfa30a247a07_articlex.png",alt:""}})]),t._v(" "),a("ol",[a("li",[t._v("Microtask 相比 Macrotask 具有更高的优先级")]),t._v(" "),a("li",[t._v("Macrotask 总是在 JS 代码执行完成并且 Microtask Queue 清空之后执行")]),t._v(" "),a("li",[t._v("JS 代码执行本身也是一个 Macrotask")]),t._v(" "),a("li",[t._v("Microtask Queue 清空后有可能会重新渲染 UI")]),t._v(" "),a("li",[t._v("Promise 属于 Microtask，setTimeout 属于 Macrotask")])]),t._v(" "),a("p",[a("strong",[t._v("总体的执行顺序为："),a("code",[t._v("常规代码")]),t._v(" -> "),a("code",[t._v("promises")]),t._v(" -> "),a("code",[t._v("events 和 setTimeout 等")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);