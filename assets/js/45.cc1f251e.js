(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{374:function(s,a,n){"use strict";n.r(a);var e=n(3),t=Object(e.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"计算属性（computed）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#计算属性（computed）"}},[s._v("#")]),s._v(" 计算属性（computed）")]),s._v(" "),n("p",[n("strong",[s._v("计算属性（computed）：优化在模版中写入过于复杂的逻辑")])]),s._v(" "),n("p",[s._v("（另外一个优化data属性的方法filters）")]),s._v(" "),n("ul",[n("li",[s._v("计算属性是根据源数据衍生出来的新数据，既然是衍生的数据，那只要源数据在data中声明过即可，同时，计算属性的试图更新必须依赖于data属性的更新")]),s._v(" "),n("li",[s._v("计算属性的名称就是计算属性处理函数的名称，使用时可以在模版中绑定计算属性，绑定方法与data中的普通属性一致")])]),s._v(" "),n("div",{staticClass:"language-vue line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-vue"}},[n("code",[s._v("data() {\n        return {\n            str: 'string'\n        }\n}\ncomputed: {\n        beautifyStr() {\n            return this.str.split('');\n        }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("计算属性的值依赖于普通属性，并且对普通属性进行缓存，只有当普通属性的值更新时，才会重新渲染计算属性，否则多次访问的计算属性均为之前该计算属性的缓存，并不会再次执行计算属性的回调函数\n默认方法为getter，可添加setter方法")]),s._v(" "),n("h2",{attrs:{id:"监听器（watch）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#监听器（watch）"}},[s._v("#")]),s._v(" 监听器（watch）")]),s._v(" "),n("p",[n("strong",[s._v("监听器（watch）：监听并处理data属性的更新")])]),s._v(" "),n("p",[s._v("属性更新时调用监听函数，可选参数分别为新值和旧值，对属性重新设置值，只要跟原来的值相等就不会触发函数调用，这一点跟计算属性是相似的")]),s._v(" "),n("div",{staticClass:"language-vue line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-vue"}},[n("code",[s._v("// 基础用法\nwatch: {\n        activeTab(newValue, oldValue) {\n            console.log(newValue, oldValue);\n            this.getList();\n        }\n}\n// 函数体调用Vue实例的方法可简写\nwatch: {\n        activeTab: 'getList'\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("watch有两个属性"),n("code",[s._v("immediate")]),s._v(","),n("code",[s._v("deep")])]),s._v(" "),n("ol",[n("li",[s._v("immediate")])]),s._v(" "),n("blockquote",[n("p",[s._v("属性初始化的值默认不会触发监听，解决办法添加说明immediate:true，表示监听初始值，此时使用handler写法")])]),s._v(" "),n("div",{staticClass:"language-vue line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-vue"}},[n("code",[s._v("watch: {\n        activeTab: {\n            handler(newValue, oldValue) {\n                console.log(newValue, oldValue);\n                this.getList();\n            },\n            // 立即执行handler函数\n            immediate: true\n        }\n    }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("ol",{attrs:{start:"2"}},[n("li",[s._v("deep")])]),s._v(" "),n("blockquote",[n("p",[s._v("当被监听的属性为对象时，默认不会监听对象内部属性的变化，而是只监听属性被赋值时的变化，解决办法添加说明deep:true（默认为false），此时监听器会深度遍历给对象的每一个属性都带上监听器，更新写法")])]),s._v(" "),n("div",{staticClass:"language-vue line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-vue"}},[n("code",[s._v("// 监听对象的所有属性\nwatch: {\n        activeTab: {\n            handler(newValue, oldValue) {\n                console.log(newValue, oldValue);\n                this.getList();\n            },\n            // 深度监听\n            deep: true\n        }\n    }\n// 监听对象的某些属性\nwatch: {\n        'activeTab.index': {\n            handler(newValue, oldValue) {\n                console.log(newValue, oldValue);\n                this.getList();\n            }\n        }\n    }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br")])]),n("p",[s._v("另外组件中的监听器会随组建的注销而注销，不会造成内存溢出，但如果使用命令式的（ vm.$watch）全局的监听器需要手动注销才行")])])}),[],!1,null,null,null);a.default=t.exports}}]);